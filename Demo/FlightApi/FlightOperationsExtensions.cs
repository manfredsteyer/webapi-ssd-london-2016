// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Client;
using Client.Models;
using Microsoft.Rest;

namespace Client
{
    public static partial class FlightOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the Client.IFlightOperations.
        /// </param>
        public static IList<Flight> GetAll(this IFlightOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFlightOperations)s).GetAllAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Client.IFlightOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Flight>> GetAllAsync(this IFlightOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Client.Models.Flight>> result = await operations.GetAllWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Client.IFlightOperations.
        /// </param>
        /// <param name='id'>
        /// Required. the id
        /// </param>
        public static Flight GetById(this IFlightOperations operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFlightOperations)s).GetByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Client.IFlightOperations.
        /// </param>
        /// <param name='id'>
        /// Required. the id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Flight> GetByIdAsync(this IFlightOperations operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Client.Models.Flight> result = await operations.GetByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Client.IFlightOperations.
        /// </param>
        /// <param name='fromParameter'>
        /// Required.
        /// </param>
        /// <param name='to'>
        /// Required.
        /// </param>
        public static IList<Flight> GetByRoute(this IFlightOperations operations, string fromParameter, string to)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFlightOperations)s).GetByRouteAsync(fromParameter, to);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Client.IFlightOperations.
        /// </param>
        /// <param name='fromParameter'>
        /// Required.
        /// </param>
        /// <param name='to'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Flight>> GetByRouteAsync(this IFlightOperations operations, string fromParameter, string to, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Client.Models.Flight>> result = await operations.GetByRouteWithOperationResponseAsync(fromParameter, to, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Client.IFlightOperations.
        /// </param>
        /// <param name='flight'>
        /// Required.
        /// </param>
        public static string Post(this IFlightOperations operations, Flight flight)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFlightOperations)s).PostAsync(flight);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Client.IFlightOperations.
        /// </param>
        /// <param name='flight'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> PostAsync(this IFlightOperations operations, Flight flight, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.PostWithOperationResponseAsync(flight, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
